!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSERT	util.h	42;"	d
ASSERTeq	util.h	56;"	d
ASSERTinfo	util.h	49;"	d
ASSERTne	util.h	64;"	d
DEBUG	util.h	27;"	d
Debug	util.h	/^int Debug;$/;"	v
FATAL	util.h	33;"	d
FATALSYS	util.h	30;"	d
Myname	util.h	/^const char *Myname;$/;"	v
OFF	pmemmalloc.c	77;"	d	file:
PMEM	pmemmalloc.h	29;"	d
PMEMMALLOC_H_	pmemmalloc.h	15;"	d
PMEM_CHUNK_SIZE	pmemmalloc.c	65;"	d	file:
PMEM_CLUMP_OFFSET	pmemmalloc.c	63;"	d	file:
PMEM_HDR_OFFSET	pmemmalloc.c	62;"	d	file:
PMEM_MIN_POOL_SIZE	pmemmalloc.c	64;"	d	file:
PMEM_NULL_OFFSET	pmemmalloc.c	59;"	d	file:
PMEM_NUM_ON	pmemmalloc.h	23;"	d
PMEM_PAGE_SIZE	pmemmalloc.c	58;"	d	file:
PMEM_RED_OFFSET	pmemmalloc.c	61;"	d	file:
PMEM_SIGNATURE	pmemmalloc.c	57;"	d	file:
PMEM_STATE_ACTIVATING	pmemmalloc.c	69;"	d	file:
PMEM_STATE_ACTIVE	pmemmalloc.c	70;"	d	file:
PMEM_STATE_FREE	pmemmalloc.c	67;"	d	file:
PMEM_STATE_FREEING	pmemmalloc.c	71;"	d	file:
PMEM_STATE_MASK	pmemmalloc.c	66;"	d	file:
PMEM_STATE_RESERVED	pmemmalloc.c	68;"	d	file:
PMEM_STATE_UNUSED	pmemmalloc.c	72;"	d	file:
PMEM_STATIC_OFFSET	pmemmalloc.c	60;"	d	file:
PMEM_STATIC_SIZE	pmemmalloc.h	20;"	d
USAGE	util.h	36;"	d
UTIL_H_	util.h	20;"	d
clump	pmemmalloc.c	/^struct clump {$/;"	s	file:
debug	util.c	/^debug(const char *file, int line, const char *func, const char *fmt, ...)$/;"	f
exename	util.c	/^exename(void)$/;"	f	file:
fatal	util.c	/^fatal(int err, const char *file, int line, const char *func,$/;"	f
off	pmemmalloc.c	/^        off_t off;$/;"	m	struct:clump::__anon1	file:
on	pmemmalloc.c	/^    } on[PMEM_NUM_ON];$/;"	m	struct:clump	typeref:struct:clump::__anon1	file:
padding	pmemmalloc.c	/^    char padding[4096 - 16 - sizeof(size_t)];$/;"	m	struct:pool_header	file:
pmemalloc_activate	pmemmalloc.c	/^pmemalloc_activate(void *pmp, void *ptr_)$/;"	f
pmemalloc_check	pmemmalloc.c	/^void pmemalloc_check(const char *path)$/;"	f
pmemalloc_coalesce_free	pmemmalloc.c	/^pmemalloc_coalesce_free(void *pmp)$/;"	f	file:
pmemalloc_free	pmemmalloc.c	/^pmemalloc_free(void *pmp, void *ptr_)$/;"	f
pmemalloc_init	pmemmalloc.c	/^pmemalloc_init(const char *path, size_t size)$/;"	f
pmemalloc_onactive	pmemmalloc.c	/^pmemalloc_onactive(void *pmp, void *ptr_, void **parentp_, void *nptr_)$/;"	f
pmemalloc_onfree	pmemmalloc.c	/^pmemalloc_onfree(void *pmp, void *ptr_, void **parentp_, void *nptr_)$/;"	f
pmemalloc_recover	pmemmalloc.c	/^pmemalloc_recover(void *pmp)$/;"	f	file:
pmemalloc_reserve	pmemmalloc.c	/^pmemalloc_reserve(void *pmp, size_t size)$/;"	f
pmemalloc_static_area	pmemmalloc.c	/^pmemalloc_static_area(void *pmp)$/;"	f
pool_header	pmemmalloc.c	/^struct pool_header {$/;"	s	file:
prevsize	pmemmalloc.c	/^    size_t prevsize;                       \/* Size of previous (lower) clump            *\/$/;"	m	struct:clump	file:
ptr_	pmemmalloc.c	/^        void *ptr_;$/;"	m	struct:clump::__anon1	file:
signature	pmemmalloc.c	/^    char signature[16];                         \/* Must be PMEM_SIGNATURE               *\/$/;"	m	struct:pool_header	file:
size	pmemmalloc.c	/^    size_t size;                           \/* Size of the clump                         *\/$/;"	m	struct:clump	file:
totalsize	pmemmalloc.c	/^    size_t totalsize;                           \/* Total file size                      *\/$/;"	m	struct:pool_header	file:
usage	util.c	/^usage(const char *argfmt, const char *fmt, ...)$/;"	f
